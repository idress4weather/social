<script type="text/javascript" src="path/to/instafeed.min.js"></script>

<script type="text/javascript">
var userFeed = new Instafeed({
get: 'user',
userId: 'YOUR_USER_ID',
accessToken: 'YOUR_ACCESS_TOKEN'
});
userFeed.run();
</script>

inst logining  http://instagram.pixelunion.net/#access_token=2321088784.1677ed0.bde13057fffd4b30aad200715ee85b61

2321088784  //access token dotochki
.1677ed0.bde13057fffd4b30aad200715ee85b61  //access token

<div id="instafeed"></div>


<script type="text/javascript" src="../api/instafeed/instafeed.min.js"></script>    
<script type="text/javascript">
var userFeed = new Instafeed({
get: 'liliia_danylevska',
userId: 'cdeab20e34cc432fad54ab2e35a30bf2',
accessToken: '2321088784'
});
userFeed.run();
</script>    



<div id="instafeed"></div> 

*************************************************************************************bestvariant
–†–æ–¥–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–¥–æ–±–∞–≤–ª–µ–Ω–æ 8 –∏—é–Ω—è 2016)

–¢—Ä–µ–±—É–µ—Ç—Å—è jQuery.

–°–∫–∞—á–∏–≤–∞–µ–º instagramGet.js.zip [830 b] (c–∫–∞—á–∏–≤–∞–Ω–∏–π: 154) –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º:

 $("#instagram").instagramGet({
"user_id": "cdeab20e34cc432fad54ab2e35a30bf2",
"access_token": "2321088784",
"count": 12
});

–î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:

<ul id="instagram"></ul>


///////////////////////////

var feed = new Instafeed({
  limit: '10',
  sortBy: 'most-liked',
  resolution: 'standard_resolution',
  clientId: 'xxxxx', 
  template:'<div class="tile"><div class="text"><b>{{likes}} &hearts; </b>{{model.user.full_name}}</div><img class="item" src="{{image}}"></div>',
  filter: function(image) {
    return image.type === 'video';
  }
});


mistake with video/////////////////////
<script type="text/javascript">
  var feed = new Instafeed({
     limit: '10',
     sortBy: 'most-liked',
     resolution: 'standard_resolution',
     clientId: '467ede5a6b9b48ae8e03f4e2582aeeb3', 
     template:'<div class="tile"><div class="text"><b>{{likes}} &hearts; </b>{{model.user.full_name}}</div><img class="item" src="{{image}}"></div>'
  });
</script>
///////////////////

///////////////////////
Instafeed.js is a dead-simple way to add Instagram photos to your website. No jQuery required, just plain 'ol javascript.

üë©‚ÄçüíªÔ∏è Install:

 
npm install react-instafeed --save
... or

 
yarn add react-instafeed
üîë Usage:

Import
 
import Instafeed from 'react-instafeed';
Render
  const instafeedTarget = 'instafeed';
  return (
    <div id={instafeedTarget}>
      <Instafeed
        limit='5'
        ref='instafeed'
        resolution='standard_resolution'
        sortBy='most-recent'
        target={instafeedTarget}
        template=''
        userId='userIdInstagramApiString'
        clientId='clientIdInstagramApiString'
        accessToken='accessTokenInstagramApiString'
      />
    </div>
  )
üììÔ∏è Notes (mostly from instafeedjs.com):
limit - Maximum number of Images to add.
resolution - Size of the images to get. Available options are:
thumbnail (default) - 150x150
low_resolution - 306x306
standard_resolution - 612x612
sortBy - Sort the images in a set order. Available options are:
none (default) - As they come from Instagram.
most-recent - Newest to oldest.
least-recent - Oldest to newest.
most-liked - Highest # of likes to lowest.
least-liked - Lowest # likes to highest.
most-commented - Highest # of comments to lowest.
least-commented - Lowest # of comments to highest.
random - Random order.
target - The ID of a DOM element you want to add the images to.
This can be to whatever you via instafeedTarget
template - Custom HTML template to use for images.
In template do not use className (React), HTML standards apply. Default (if nothing is passed):

 
`<a href='{{link}}' target='_blank' class='instafeed__item'>
  <img class='instafeed__item__background' src='{{image}}' />
    <div class='instafeed__item__overlay'>
      <div class='instafeed__item__overlay--inner'>
        <p class='instafeed__item__caption'>{{model.short_caption}}</p>
        <p class='instafeed__item__location'>{{location}}</p>
      </div>
    </div>
</a>`
Further Documentation
http://instafeedjs.com/ https://github.com/stevenschobert/instafeed.js

As well as a breakdown of some advanced functionality in this issue: https://github.com/stevenschobert/instafeed.js/issues/21

API
instafeed.js is client facing library, so your API Keys and the like kind of need to be in the code to work. If there is a more secure way of doing this, please submit an Issue / Pull Request / etc.

These are set explicitly in this example, however, in my usual build process I have been using babel-plugin-transform-define.

Before:

 
userId='userIdInstagramApiString'
clientId='clientIdInstagramApiString'
accessToken='accessTokenInstagramApiString'
After:

 
userId={`${INSTAGRAM_USER_ID}`} // eslint-disable-line no-undef 
clientId={`${INSTAGRAM_CLIENT_ID}`} // eslint-disable-line no-undef 
accessToken={`${INSTAGRAM_ACCESS_TOKEN}`} // eslint-disable-line no-undef 
If you are using react-scripts, add your keys to your .env file with the REACT_APP_ precursor:

 
userId={`${process.env.REACT_APP_INSTAGRAM_USER_ID}`}
clientId={`${process.env.REACT_APP_INSTAGRAM_CLIENT_ID}`}
accessToken={`${process.env.REACT_APP_INSTAGRAM_ACCESS_TOKEN}`}
FYI: Technically your API Keys are not in your Repo, however, they will still absolutely be in your end build javascript.

